% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/Graph_to_NN.R
\name{Graph-to-NN}
\alias{Graph-to-NN}
\alias{graphToNN}
\alias{nnToGraph}
\alias{nnToGraph.list}
\alias{graphToNN.CsparseMatrix}
\alias{graphToNN.TsparseMatrix}
\title{Coerce between sparse graph and k nearest-neighbor (kNN) indices and weights}
\usage{
graphToNN(object, ...)

nnToGraph(object, ...)

\method{nnToGraph}{list}(
  object,
  repr = c("C", "T"),
  use.weights = TRUE,
  self.loops = TRUE,
  ...
)

\method{graphToNN}{CsparseMatrix}(object, ...)

\method{graphToNN}{TsparseMatrix}(object, ...)
}
\arguments{
\item{object}{An input object.
\itemize{
\item For \code{graphToNN}, a sparse matrix (\code{.doc_links("CsparseMatrix")}
or \code{.doc_links("TsparseMatrix")}. Each column is an observation and should
contain "k" non-zero values.
\item For \code{nnToGraph}, a list containing \code{idx} matrix and \code{dist} matrix.
}}

\item{...}{Arguments passed to other metheds.}

\item{repr}{One of "C" and "T", specifying the representation of the sparse
matrix result}

\item{use.weights}{Whether to weighted the output sparse matrix with \code{dist}.}

\item{self.loops}{Whether to allow self-loops in the output sparse graph. If
\code{FALSE}, all diagnoal values will be set to 0.}
}
\value{
\itemize{
\item \code{graphToNN}: A list containing an \code{idx} matrix and \code{dist} matrix. Each
row represents an observation in NN results.
}

\itemize{
\item \code{nnToGraph}: A square sparse matrix where each column and each row
represents an observation. The distances of k nearest neighbors are formatted
as column major, that is, each column should contains k - 1 non-zero values.
}
}
\description{
Convert between kNN indices and weights (for example, distances) matrices and
sparse matrix.
}
\note{
Don't run \code{\link[Matrix]{drop0}} on the output matrix, otherwise it will not
be retained as an NN list. Because the distances between each pair of NN can
be 0.
}
\examples{
data(pca)
nn <- hnswNN(pca, k = 8)
nn_mat <- nnToGraph(nn)
nn2 <- graphToNN(nn_mat)

}
